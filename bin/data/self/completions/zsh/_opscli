#compdef opscli
__opscli::completion() {
    local path word opts sh end_index log_path
    log_path="${HOME_OF_OPS_CLI}/.logs/_opscli.log"
    echo "$log_path" >> "/data/workspace/aplat/deployment/ops-cli/.logs/test.log"
    path="${HOME_OF_OPS_CLI}/bin/scripts"
    # 如果 words 是以一个或多个空格结尾, 则 end_index 为 1, 否则为 2
    # shellcheck disable=SC2154
    end_index="$([[ "$words" =~ ^.*\\s+$ ]] && echo "1" || echo "2")"
    for word in "${words[@]:1:((${#words} - $end_index))}" # 加了引号, 需要确认一下
    do
        # 如果 word 是 - 开头的, 则结束拼接. - 开头的是 flags/options, 不是 path
        if [[ "$word" =~ ^-.* ]]; then
            break
        fi
        path="${path}/${word}"
    done


    echo "path=${path};" >> "$log_path"

    if [[ -f "${path%/}.sh.comp" ]]; then
        opts="$(. "${path%/}.sh.comp")"
    else
        if [[ -d "${path}" ]]; then
            opts=""
            for sh in $(/bin/ls ${path}/*.sh); do
                sh="$(/usr/bin/basename "$sh")"
                opts="$opts ${sh%.*}"
            done
        fi
        if [[ -f "${path%/}.sh.help" ]]; then
            # path 最后包含一个 /, ${path%/} 是去掉最后一个 / 的
            echo "$(. "${path%/}.sh.help" flags)" >> "$log_path"
            # 获取 .sh.help 中 flags 中的 -h, --help 这种 flag
            opts="$opts $(. "${path%/}.sh.help" flags | /bin/grep -oP '(?:^\s*|\,\s?)\K(-\w+|--\w+)')"
        elif [[ -f "${path%/}.sh.def" ]]; then
            # path 最后包含一个 /, ${path%/} 是去掉最后一个 / 的

            # shellcheck disable=SC1090
            . "${path%/}.sh.def"
            eval "$(get_def)"
            # 获取 def 中定义的 flags 和 options
            eval "${def_map["flags"]}"
            echo "${def_map["options"]}" >> "$log_path"
            eval "${def_map["options"]}"
            # zsh 获取 key 的方式比较特别, 需要加上 (k)
            for key in ${(k)options}; do
                # 获取到的 key 带有双引号, 要去掉
                key="${key:gs/\"//}"
                key="${key%%=*}"
                opts="$opts ${key//,/ }"
            done
            for key in ${(k)flags}; do
                key="${key:gs/\"//}"
                opts="$opts ${key//,/ }"
            done
        fi
    fi
    echo "opts=$opts" >> "$log_path"
    if [[ -n "$opts" ]]; then
        _values "This is description" $(echo "$opts")
    else
        _arguments '*:files:_files'
    fi
}

__opscli::completion
